#Abrir o site Tesouro direto e retirar informações dos valores dos titulos. 
## Pacotes para execução das funções
#install.packages("readxl")

library(Hmisc)
library(date)
library(zoo)
memory.limit(size = 4000)
library(sqldf)
library(stringr)
library(XML)
library(kulife)
library(xml2)
library(foreign)
library(rvest)
library(readxl)
library(janitor)

setwd("C:/Users/ajzan/Documents/GitHub/Tesouro-Direto/DataBase/Historic")
i=1
while (i <= length(list.files(getwd(),full.names = FALSE, recursive = FALSE))){
	j=1
	while (j<=length(list.files(paste(getwd(),list.files(getwd(),full.names = FALSE, recursive = FALSE)[i], sep="/"),full.names = FALSE, recursive = FALSE))){

		#Abrir cada excel e destinar para cada tabela. Compra, venda (Taxa e Valor)

		#list.files(paste(getwd(),list.files(getwd(),full.names = FALSE, recursive = FALSE)[i], sep="/"),full.names = FALSE, recursive = FALSE)[j]

		#dir
		#paste(paste(getwd(),list.files(getwd(),full.names = FALSE, recursive = FALSE)[i], sep="/"),list.files(paste(getwd(),list.files(getwd(),full.names = FALSE, recursive = FALSE)[i], sep="/"),full.names = FALSE, recursive = FALSE)[j], sep="/")

		lim = 1
		while (lim <= 10){
			read_xls(paste(paste(getwd(),list.files(getwd(),full.names = FALSE, recursive = FALSE)[i], sep="/"),list.files(paste(getwd(),list.files(getwd(),full.names = FALSE, recursive = FALSE)[i], sep="/"),full.names = FALSE, recursive = FALSE)[j], sep="/"),lim, range = cell_cols("A:E"))

			names(read_xls(paste(paste(getwd(),list.files(getwd(),full.names = FALSE, recursive = FALSE)[i], sep="/"),list.files(paste(getwd(),list.files(getwd(),full.names = FALSE, recursive = FALSE)[i], sep="/"),full.names = FALSE, recursive = FALSE)[j], sep="/"),lim, range = cell_cols("A:E")))[2]
			nData = 1
			n = 1
			GeneralData =as.data.frame(0)
			if (nrow(GeneralData) == 1){

			}

			lim = lim + 1
		}
		


		j=j+1
	}


	i=i+1
}



function vencimentos(dir){
	DataNames = matrix()
	i=1
	while (i <= length(list.files(dir,full.names = FALSE, recursive = FALSE))){
		j=1
		while (j<=length(list.files(paste(dir,list.files(dir,full.names = FALSE, recursive = FALSE)[i], sep="/"),full.names = FALSE, recursive = FALSE))){

			lim = 1
			while (lim <= length(excel_sheets(paste(paste(dir,list.files(dir,full.names = FALSE, recursive = FALSE)[i], sep="/"),list.files(paste(dir,list.files(dir,full.names = FALSE, recursive = FALSE)[i], sep="/"),full.names = FALSE, recursive = FALSE)[j], sep="/")))){		
				if (nchar(names(read_xls(paste(paste(dir,list.files(dir,full.names = FALSE, recursive = FALSE)[i], sep="/"),list.files(paste(dir,list.files(dir,full.names = FALSE, recursive = FALSE)[i], sep="/"),full.names = FALSE, recursive = FALSE)[j], sep="/"),lim, range = cell_cols("A:E")))[2])>=6){
					DataNames = rbind(DataNames,paste(list.files(dir,full.names = FALSE, recursive = FALSE)[i],names(read_xls(paste(paste(dir,list.files(dir,full.names = FALSE, recursive = FALSE)[i], sep="/"),list.files(paste(dir,list.files(dir,full.names = FALSE, recursive = FALSE)[i], sep="/"),full.names = FALSE, recursive = FALSE)[j], sep="/"),lim, range = cell_cols("A:E")))[2],sep=" "))
					} else{
					DataNames = rbind(DataNames, paste(list.files(dir,full.names = FALSE, recursive = FALSE)[i],format(excel_numeric_to_date(as.numeric(names(read_xls(paste(paste(dir,list.files(dir,full.names = FALSE, recursive = FALSE)[i], sep="/"),list.files(paste(dir,list.files(dir,full.names = FALSE, recursive = FALSE)[i], sep="/"),full.names = FALSE, recursive = FALSE)[j], sep="/"),lim, range = cell_cols("A:E")))[2])),"%d/%m/%Y"),sep=" "))
					}
				#names(read_xls(paste(paste(dir,list.files(dir,full.names = FALSE, recursive = FALSE)[i], sep="/"),list.files(paste(dir,list.files(dir,full.names = FALSE, recursive = FALSE)[i], sep="/"),full.names = FALSE, recursive = FALSE)[j], sep="/"),lim, range = cell_cols("A:E")))[2]
				#DataNames = rbind(DataNames, paste(list.files(dir,full.names = FALSE, recursive = FALSE)[i],excel_numeric_to_date(as.numeric(names(read_xls(paste(paste(dir,list.files(dir,full.names = FALSE, recursive = FALSE)[i], sep="/"),list.files(paste(dir,list.files(dir,full.names = FALSE, recursive = FALSE)[i], sep="/"),full.names = FALSE, recursive = FALSE)[j], sep="/"),lim, range = cell_cols("A:E")))[2])),sep=" "))
				#DataNames = rbind(DataNames,paste(list.files(dir,full.names = FALSE, recursive = FALSE)[i],names(read_xls(paste(paste(dir,list.files(dir,full.names = FALSE, recursive = FALSE)[i], sep="/"),list.files(paste(dir,list.files(dir,full.names = FALSE, recursive = FALSE)[i], sep="/"),full.names = FALSE, recursive = FALSE)[j], sep="/"),lim, range = cell_cols("A:E")))[2],sep=" "))
				lim = lim + 1
			}
			j=j+1
		}
		i=i+1
	}
	DataNames<-as.data.frame(DataNames)
	names(DataNames)<-"Titulos Vencimentos"
	DataNames<-na.omit(DataNames)
	DataNames<-DataNames[!duplicated(DataNames),]
	return(DataNames)


str_sub(DataNames, end=6)

	#Corrigir as datas com o janitor function excel_numeric_to_date(40000). Usar substring e remontar a string com a data no formato certo
}


