install.packages('miniUI')
install.packages('shiny')
install.packages("taskscheduleR")
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
#Functions deep learning (Statistics Model)
library(caTools)
library(ggplot2)
FileAddress<-"C:/Users/ajzan/Documents/GitHub/Tesouro-Direto/"
setwd(paste(FileAddress,"DataBase",sep="/"))
source(file=paste(FileAddress,"functions.R",sep="/"))
DataBase<-read.table(paste(getwd(),"Data3.txt", sep="/"),header = TRUE, sep="\t", dec=".")
#convert factor to date
#######DataBase[,2]<-as.Date(DataBase[,2])
#filter if have any missing data
#set for numerical variable
#identify class for all columns
#separate per treasury
i=1
DataBase_Col_class<-matrix(0,nrow = ncol(DataBase), ncol = 2)
while(i<=ncol(DataBase)){
DataBase_Col_class[i,1]<-i
DataBase_Col_class[i,2]<-(class(DataBase[,i]))
i=i+1
}
listaBase<-list(0)
i=1
while(i<=nrow(DataBase_Col_class)){
if(DataBase_Col_class[i,2]=="numeric" | DataBase_Col_class[i,2]=="integer"){
#se estiver faltando dadonumerico, colocar a media. Senao deixar sem mesmo
if(nrow(DataBase[is.na(DataBase),])>0){
DataBase[,as.numeric(DataBase_Col_class[i,1])] = ifelse(is.na(DataBase[,as.numeric(DataBase_Col_class[i,1])]),
ave(DataBase[,as.numeric(DataBase_Col_class[i,1])], FUN = function(x) mean(x, na.rm = TRUE)),
DataBase[,as.numeric(DataBase_Col_class[i,1])])
}
}
#set for non numerical variable
if(DataBase_Col_class[i,2]=="factor"){
#create vector with levels
##    levels(DataBase[,as.numeric(DataBase_Col_class[i,1])])
j=1
classLevels<-matrix(0,nrow = length(levels(DataBase[,as.numeric(DataBase_Col_class[i,1])])), ncol = 2)
while(j<=nrow(classLevels)){
classLevels[j,1]<-levels(DataBase[,as.numeric(DataBase_Col_class[i,1])])[j]
classLevels[j,2]<-j-1
j=j+1
}
DataBase[,as.numeric(DataBase_Col_class[i,1])]  = factor(DataBase[,as.numeric(DataBase_Col_class[i,1])] ,
levels = classLevels[,1],
labels = classLevels[,2])
listaBase<-list(listaBase, classLevels)
}
################################################################################################
############nao implementado, os dados ainda nao tem essa classificacao para tratarmos##########
################################################################################################
if(DataBase_Col_class[i,2]=="Date"){
#and date?????????
}
################################################################################################
############nao implementado, os dados ainda nao tem essa classificacao para tratarmos##########
################################################################################################
i=i+1
}
i=1
#n_treasury<-length(names(summary(DataBase[,1])))
#Treasury_names<-names(summary(DataBase[,1]))
#while
#subDataBase <- DataBase[which(DataBase[,1]==Treasury_names[i]), ]
#linearmodel (best model)
SimpleLinearRegression(DataBase, 0.05)
#Functions deep learning (Statistics Model)
library(caTools)
library(ggplot2)
FileAddress<-"C:/Users/ajzan/Documents/GitHub/Tesouro-Direto/"
setwd(paste(FileAddress,"DataBase",sep="/"))
source(file=paste(FileAddress,"functions.R",sep="/"))
DataBase<-read.table(paste(getwd(),"Data3.txt", sep="/"),header = TRUE, sep="\t", dec=".")
#convert factor to date
#######DataBase[,2]<-as.Date(DataBase[,2])
#filter if have any missing data
#set for numerical variable
#identify class for all columns
#separate per treasury
i=1
DataBase_Col_class<-matrix(0,nrow = ncol(DataBase), ncol = 2)
while(i<=ncol(DataBase)){
DataBase_Col_class[i,1]<-i
DataBase_Col_class[i,2]<-(class(DataBase[,i]))
i=i+1
}
listaBase<-list(0)
i=1
while(i<=nrow(DataBase_Col_class)){
if(DataBase_Col_class[i,2]=="numeric" | DataBase_Col_class[i,2]=="integer"){
#se estiver faltando dadonumerico, colocar a media. Senao deixar sem mesmo
if(nrow(DataBase[is.na(DataBase),])>0){
DataBase[,as.numeric(DataBase_Col_class[i,1])] = ifelse(is.na(DataBase[,as.numeric(DataBase_Col_class[i,1])]),
ave(DataBase[,as.numeric(DataBase_Col_class[i,1])], FUN = function(x) mean(x, na.rm = TRUE)),
DataBase[,as.numeric(DataBase_Col_class[i,1])])
}
}
#set for non numerical variable
if(DataBase_Col_class[i,2]=="factor"){
#create vector with levels
##    levels(DataBase[,as.numeric(DataBase_Col_class[i,1])])
j=1
classLevels<-matrix(0,nrow = length(levels(DataBase[,as.numeric(DataBase_Col_class[i,1])])), ncol = 2)
while(j<=nrow(classLevels)){
classLevels[j,1]<-levels(DataBase[,as.numeric(DataBase_Col_class[i,1])])[j]
classLevels[j,2]<-j-1
j=j+1
}
DataBase[,as.numeric(DataBase_Col_class[i,1])]  = factor(DataBase[,as.numeric(DataBase_Col_class[i,1])] ,
levels = classLevels[,1],
labels = classLevels[,2])
listaBase<-list(listaBase, classLevels)
}
################################################################################################
############nao implementado, os dados ainda nao tem essa classificacao para tratarmos##########
################################################################################################
if(DataBase_Col_class[i,2]=="Date"){
#and date?????????
}
################################################################################################
############nao implementado, os dados ainda nao tem essa classificacao para tratarmos##########
################################################################################################
i=i+1
}
i=1
#n_treasury<-length(names(summary(DataBase[,1])))
#Treasury_names<-names(summary(DataBase[,1]))
#while
library(caTools)
library(ggplot2)
library(jtools)
library(sandwich)
library(AutoModel)
#library(tidyverse)
#library(caret)
#library(leaps)
library(MASS)
pvalue<-0.05
correctnames<-matrix(0,nrow = ncol(DataBase), ncol = 2)
i=1
while(i<=ncol(DataBase)){
correctnames[i,2]<-names(DataBase[i])
names(DataBase)[i] <- paste("Var",i,sep="")
correctnames[i,1]<-paste("Var",i,sep="")
i=i+1
}
correctnames
i=2
j=1
col<-ncol(DataBase)
col
DataBase
i<=col
class(DataBase[,i])=="numeric" | class(DataBase[,i])=="integer"
DataBase<-cbind(DataBase,DataBase[,i]^2)
names(DataBase)[col+i-2+j]<-paste(paste("Var",i,sep=""),"^2",sep="")
j=j+1
DataBase<-cbind(DataBase,DataBase[,i]^3)
names(DataBase)[col+i-2+j]<-paste(paste("Var",i,sep=""),"^3",sep="")
j=j+1
DataBase<-cbind(DataBase,DataBase[,i]^4)
names(DataBase)[col+i-2+j]<-paste(paste("Var",i,sep=""),"^4",sep="")
j=j+1
j
DataBase
i=i+1
i<=col
i
class(DataBase[,i])=="numeric" | class(DataBase[,i])=="integer"
col+i-2+j
#Functions deep learning (Statistics Model)
library(caTools)
library(ggplot2)
FileAddress<-"C:/Users/ajzan/Documents/GitHub/Tesouro-Direto/"
setwd(paste(FileAddress,"DataBase",sep="/"))
source(file=paste(FileAddress,"functions.R",sep="/"))
DataBase<-read.table(paste(getwd(),"Data3.txt", sep="/"),header = TRUE, sep="\t", dec=".")
#convert factor to date
#######DataBase[,2]<-as.Date(DataBase[,2])
#filter if have any missing data
#set for numerical variable
#identify class for all columns
#separate per treasury
i=1
DataBase_Col_class<-matrix(0,nrow = ncol(DataBase), ncol = 2)
while(i<=ncol(DataBase)){
DataBase_Col_class[i,1]<-i
DataBase_Col_class[i,2]<-(class(DataBase[,i]))
i=i+1
}
listaBase<-list(0)
i=1
while(i<=nrow(DataBase_Col_class)){
if(DataBase_Col_class[i,2]=="numeric" | DataBase_Col_class[i,2]=="integer"){
#se estiver faltando dadonumerico, colocar a media. Senao deixar sem mesmo
if(nrow(DataBase[is.na(DataBase),])>0){
DataBase[,as.numeric(DataBase_Col_class[i,1])] = ifelse(is.na(DataBase[,as.numeric(DataBase_Col_class[i,1])]),
ave(DataBase[,as.numeric(DataBase_Col_class[i,1])], FUN = function(x) mean(x, na.rm = TRUE)),
DataBase[,as.numeric(DataBase_Col_class[i,1])])
}
}
#set for non numerical variable
if(DataBase_Col_class[i,2]=="factor"){
#create vector with levels
##    levels(DataBase[,as.numeric(DataBase_Col_class[i,1])])
j=1
classLevels<-matrix(0,nrow = length(levels(DataBase[,as.numeric(DataBase_Col_class[i,1])])), ncol = 2)
while(j<=nrow(classLevels)){
classLevels[j,1]<-levels(DataBase[,as.numeric(DataBase_Col_class[i,1])])[j]
classLevels[j,2]<-j-1
j=j+1
}
DataBase[,as.numeric(DataBase_Col_class[i,1])]  = factor(DataBase[,as.numeric(DataBase_Col_class[i,1])] ,
levels = classLevels[,1],
labels = classLevels[,2])
listaBase<-list(listaBase, classLevels)
}
################################################################################################
############nao implementado, os dados ainda nao tem essa classificacao para tratarmos##########
################################################################################################
if(DataBase_Col_class[i,2]=="Date"){
#and date?????????
}
################################################################################################
############nao implementado, os dados ainda nao tem essa classificacao para tratarmos##########
################################################################################################
i=i+1
}
i=1
#n_treasury<-length(names(summary(DataBase[,1])))
#Treasury_names<-names(summary(DataBase[,1]))
#while
library(caTools)
library(ggplot2)
library(jtools)
library(sandwich)
library(AutoModel)
#library(tidyverse)
#library(caret)
#library(leaps)
library(MASS)
#summary(reg)$r.squared
#R Squared adj
#summary(reg)$adj.r.squared
#p-value
#summary(reg)$coefficients[,4]
pvalue<-0.05
SimpleLinearRegression<- function(DataBase, pvalue){
correctnames<-matrix(0,nrow = ncol(DataBase), ncol = 2)
i=1
while(i<=ncol(DataBase)){
correctnames[i,2]<-names(DataBase[i])
names(DataBase)[i] <- paste("Var",i,sep="")
correctnames[i,1]<-paste("Var",i,sep="")
i=i+1
}
####TEM UM ERRO AQUI
i=2
j=1
col<-ncol(DataBase)
while(i<=col){
#numeric variable ^2, ^3, ^4
if(class(DataBase[,i])=="numeric" | class(DataBase[,i])=="integer"){
DataBase<-cbind(DataBase,DataBase[,i]^2)
names(DataBase)[col+i-2+j]<-paste(paste("Var",i,sep=""),"^2",sep="")
DataBase<-cbind(DataBase,DataBase[,i]^3)
names(DataBase)[col+i-2+j]<-paste(paste("Var",i,sep=""),"^3",sep="")
DataBase<-cbind(DataBase,DataBase[,i]^4)
names(DataBase)[col+i-2+j]<-paste(paste("Var",i,sep=""),"^4",sep="")
j=j+2
} else {
j=j-1
}
i=i+1
}
########
#retirar a variavel com fatores maiores que 5 classes
i=2
while(i<=col){
if(class(DataBase[,i])=="factor" & length(levels(DataBase[,i]))>=5){
DataBase<-DataBase[,-i]
}
i=i+1
}
set.seed(123)
split = sample.split(DataBase[,1], SplitRatio = 0.8)
training_set = subset(DataBase, split == TRUE)
test_set = subset(DataBase, split == FALSE)
training_set_test<-training_set
test_set_test<-test_set
max_p_value<-0
ini<-0
while(max_p_value >= pvalue | ini==0){
ini=1
# Fitting Simple Linear Regression to the Training set
reg = lm(formula = Var1 ~ .,
data = training_set_test)
j=1
max_p_value<-summary(reg)$coefficients[j+1,4]
max_j<-j+1
while(j<=length(summary(reg)$coefficients[,4])-2){
if(summary(reg)$coefficients[j+2,4]>max_p_value){
max_p_value<-summary(reg)$coefficients[j+2,4]
max_j<-j+2
}
j=j+1
}
if(max_p_value>pvalue){
training_set_test<-training_set_test[,-max_j]
test_set_test<-test_set_test[,-max_j]
}
}
training_set<-training_set_test
test_set<-test_set_test
regressor = lm(formula = Var1 ~ .,
data = training_set)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
listaretorno<-list(summ(regressor, digits = 9), training_set, test_set, y_pred, correctnames, summary(regressor)$adj.r.squared)
names(listaretorno)[1]<-"Summary of Regressor"
names(listaretorno)[2]<-"Training Set DataBase"
names(listaretorno)[3]<-"Test Set DataBase"
names(listaretorno)[4]<-"Y_pred"
names(listaretorno)[5]<-"Correctnames"
names(listaretorno)[6]<-"Adj.r.squared"
return(listaretorno)
}
SimpleLinearRegression(DataBase, 0.05)
#Functions deep learning (Statistics Model)
library(caTools)
library(ggplot2)
FileAddress<-"C:/Users/ajzan/Documents/GitHub/Tesouro-Direto/"
setwd(paste(FileAddress,"DataBase",sep="/"))
source(file=paste(FileAddress,"functions.R",sep="/"))
DataBase<-read.table(paste(getwd(),"Data3.txt", sep="/"),header = TRUE, sep="\t", dec=".")
#convert factor to date
#######DataBase[,2]<-as.Date(DataBase[,2])
#filter if have any missing data
#set for numerical variable
#identify class for all columns
#separate per treasury
i=1
DataBase_Col_class<-matrix(0,nrow = ncol(DataBase), ncol = 2)
while(i<=ncol(DataBase)){
DataBase_Col_class[i,1]<-i
DataBase_Col_class[i,2]<-(class(DataBase[,i]))
i=i+1
}
listaBase<-list(0)
i=1
while(i<=nrow(DataBase_Col_class)){
if(DataBase_Col_class[i,2]=="numeric" | DataBase_Col_class[i,2]=="integer"){
#se estiver faltando dadonumerico, colocar a media. Senao deixar sem mesmo
if(nrow(DataBase[is.na(DataBase),])>0){
DataBase[,as.numeric(DataBase_Col_class[i,1])] = ifelse(is.na(DataBase[,as.numeric(DataBase_Col_class[i,1])]),
ave(DataBase[,as.numeric(DataBase_Col_class[i,1])], FUN = function(x) mean(x, na.rm = TRUE)),
DataBase[,as.numeric(DataBase_Col_class[i,1])])
}
}
#set for non numerical variable
if(DataBase_Col_class[i,2]=="factor"){
#create vector with levels
##    levels(DataBase[,as.numeric(DataBase_Col_class[i,1])])
j=1
classLevels<-matrix(0,nrow = length(levels(DataBase[,as.numeric(DataBase_Col_class[i,1])])), ncol = 2)
while(j<=nrow(classLevels)){
classLevels[j,1]<-levels(DataBase[,as.numeric(DataBase_Col_class[i,1])])[j]
classLevels[j,2]<-j-1
j=j+1
}
DataBase[,as.numeric(DataBase_Col_class[i,1])]  = factor(DataBase[,as.numeric(DataBase_Col_class[i,1])] ,
levels = classLevels[,1],
labels = classLevels[,2])
listaBase<-list(listaBase, classLevels)
}
################################################################################################
############nao implementado, os dados ainda nao tem essa classificacao para tratarmos##########
################################################################################################
if(DataBase_Col_class[i,2]=="Date"){
#and date?????????
}
################################################################################################
############nao implementado, os dados ainda nao tem essa classificacao para tratarmos##########
################################################################################################
i=i+1
}
i=1
#n_treasury<-length(names(summary(DataBase[,1])))
#Treasury_names<-names(summary(DataBase[,1]))
#while
#subDataBase <- DataBase[which(DataBase[,1]==Treasury_names[i]), ]
#linearmodel (best model)
SimpleLinearRegression(DataBase, 0.05)
SimpleLinearRegression(DataBase, 0.05)
